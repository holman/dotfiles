" Install vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-bundler'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'              " Adds end to methods for if's etc.
Plug 'tomtom/tcomment_vim'            " Commentor
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'elzr/vim-json'
Plug 'mxw/vim-jsx'
Plug 'w0rp/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'mileszs/ack.vim'
Plug 'benmills/vimux'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'posva/vim-vue'
Plug 'rizzatti/dash.vim'
Plug 'othree/yajs.vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'othree/html5.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'vimwiki/vimwiki'
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-vinegar'

" Add local plugins that you don't really want
" in your repo, here (maybe work stuff)
try
  source ~/.vimplugins.local
catch
  "Unable to open vimplugins.local"
endtry

call plug#end()

" Paste the text from standup.md into the current file
nmap <Space>s :r ~/.dotfiles/vim//standup.md<CR>

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

set term=xterm-kitty

if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

set background=dark
let g:enable_bold_font = 1
let g:hybrid_transparent_background = 1
colorscheme nord

augroup nord-overrides
  autocmd!
  autocmd ColorScheme nord highlight Comment ctermfg=68
augroup END


"  ---------------------------------------------------
"  TEXT FORMATTING
"  ---------------------------------------------------
set autoindent        " automatic indent new lines
set smartindent       " be smart about it
inoremap # X<BS>#
set nowrap            " do not wrap lines
set softtabstop=2     " yep, two
set shiftwidth=2      " ..
set tabstop=2
set expandtab         " expand tabs to spaces
set nosmarttab        " no tabs
set formatoptions+=n  " support for numbered/bullet lists
set textwidth=90      " wrap at 90 chars by default
set virtualedit=block " allow virtual edit in visual block ..
set mouse=a           " enable mouse in term                  "
set wildmenu

"  ----------------------------------------------------
"  REMAPPING
"  ----------------------------------------------------
" , as leader
let mapleader = ','

" exit to normal mode with jj
inoremap jj <ESC>


" reload vim <Leader>s
map <leader>rld :source ~/.vimrc<CR>

" Movement around panes CTRL-<letter>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <Leader><Leader> :e#<CR> " Reopen last file
nnoremap <Leader>w :w<CR> " <Leader>w will save
nnoremap <Leader>qc :ccl<CR> " close quick fix window

nnoremap <silent> <leader>nb :set relativenumber!<CR>

set relativenumber                                  " default to relative line numbers
set ruler                                           " show the cursor position all the time
set noshowcmd                                       " don't display incomplete commands
set nolazyredraw                                    " turn off lazy redraw
set number                                          " line numbers
set wildmenu                                        " turn on wild menu
set wildmode=list:longest,full
set ch=2                                            " command line height
set backspace=2                                     " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,]                          " backspace and cursor keys wrap to
set shortmess=filtIoOA                              " shorten messages
set report=0                                        " tell us about changes
set nostartofline                                   " don't jump to the start of line when scrolling
set showmatch                                       " brackets/braces that is
set mat=5                                           " duration to show matching brace (1/10 sec)
set incsearch                                       " do incremental searching
set laststatus=2                                    " always show the status line
set ignorecase                                      " ignore case when searching
set visualbell                                      " shut up
set smartcase                                       " if we add uppercase when searching it will find that
set winwidth=90                                     " minimum split window width
set noswapfile                                      " don't create .swp files
set nocompatible
set encoding=UTF-8

syntax on

autocmd StdinReadPre * let s:std_in=1
nmap <F8> :TagbarToggle<CR>


let g:NetrwIsOpen=0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction

" function! ToggleVExplorer()
"   if exists("t:expl_buf_num")
"       let expl_win_num = bufwinnr(t:expl_buf_num)
"       if expl_win_num != -1
"           let cur_win_nr = winnr()
"           exec expl_win_num . 'wincmd w'
"           close
"           exec cur_win_nr . 'wincmd w'
"           unlet t:expl_buf_num
"       else
"           unlet t:expl_buf_num
"       endif
"   else
"       exec '1wincmd w'
"       Vexplore
"       let t:expl_buf_num = bufnr("%")
"   endif
" endfunction

"Set default width of explorer to make it appear like a sidebar. Also defaults to tree style.
let g:netrw_banner = 0
let g:netrw_liststyle=3
let g:netrw_winsize=18
" let g:netrw_hide=1
let g:netrw_browse_split=4
let g:netrw_altv=1
" let g:netrw_fastbrowse = 1
set autochdir
nnoremap <silent> <leader>nn :call ToggleNetrw()<cr>

" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END

" Always enable preview window on the right with 60% width
let g:fzf_layout = { 'up': '~25%' }
nnoremap <silent> <leader>s :FZF<cr>
nnoremap <silent> <leader>S :FZF ~<cr>
nnoremap <silent> <Leader>ja :FZF app/assets<CR>
nnoremap <silent> <Leader>jc :FZF app/controllers<CR>
nnoremap <silent> <Leader>jC :FZF config<CR>
nnoremap <silent> <Leader>jh :FZF app/helpers<CR>
nnoremap <silent> <Leader>ji :FZF app/interactors<CR>
nnoremap <silent> <Leader>jb :FZF app/jobs<CR>
nnoremap <silent> <Leader>jm :FZF app/models<CR>
nnoremap <silent> <Leader>jp :FZF app/policies<CR>
nnoremap <silent> <Leader>jP :FZF app/presenters<CR>
nnoremap <silent> <Leader>js :FZF app/services<CR>
nnoremap <silent> <Leader>jt :FZF app/tasks<CR>
nnoremap <silent> <Leader>jv :FZF app/views<CR>
nnoremap <silent> <Leader>jD :FZF db<CR>
nnoremap <silent> <Leader>jF :FZF test/factories<CR>
nnoremap <silent> <Leader>jL :FZF lib<CR>
nnoremap <silent> <Leader>jS :FZF spec<CR>
nnoremap <silent> <Leader>jT :FZF test<CR>
nnoremap <silent> <Leader>jV :FZF vendor<CR>

" Easier rails movement
nnoremap ,vv :Eview<cr>
nnoremap ,cc :Econtroller<cr>
nnoremap ,rA :AV<cr>
nnoremap ,ra :A<cr>

" Easier window splits
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" Type ,hl to toggle highlighting on/off, and show current value.
noremap ,hl :set hlsearch! hlsearch?<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>

" Automatically trim trailing whitespace
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

autocmd BufWritePre * :%s#\($\n\s*\)\+\%$##e"

" --- Tabular.vim ---
noremap <silent> <leader>t: :Tabularize /:<CR>
noremap <silent> <leader>t= :Tabularize /=<CR>
noremap <silent> <leader>t, :Tabularize /,<CR>
noremap <silent> <leader>t{ :Tabularize /{<CR>
noremap <silent> <leader>t" :Tabularize /"<CR>
noremap <silent> <leader>t' :Tabularize /'<CR>
noremap <silent> <leader>t[ :Tabularize /[<CR>
noremap <silent> <leader>t/ :Tabularize ///<CR>
noremap <silent> <leader>t\| :Tabularize /\|<CR>

" --- Dash.vim ---
:nmap <silent> <leader>d <Plug>DashSearch
nmap <leader>d <Plug>DashSearch

" --- ctags ---
set tags=./tags;~/Development
nnoremap <leader>ct :silent ! ctags --tag-relative -L -f"$$.tags" --languages=-sql --exclude=.git --exclude=log --exclude=node_modules --exclude=tmp<cr>
let g:fzf_tags_command = 'ctags --tag-relative -L -f"$$.tags" --languages=-sql --exclude=.git --exclude=log --exclude=nodule_modules --exclude=tmp'

" --- ale ---
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1

" Ack.vim
let g:ackhighlight = 1 " Highlight the current ack search
let g:ack_autofold_results = 1 " Folds by filename until stepping through the quick fix list
let g:ack_use_cword_for_empty_search = 0 " Search for cword on blank :Ack
if executable('ag')
  " Use the silver searcher when available
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Commands to run tests with vimux
" Remove current local dir from bufname?
map <Leader>rs :call VimuxRunCommand("clear; bundle exec rspec s . bufname("%"))<CR>
" map <Leader>rt :call VimuxRunCommand("clear; bundle exec ruby -I test " . bufname("%"))<CR>
map <Leader>rt :call VimuxRunCommand("clear; bundle exec rails test -f -c " . bufname("%"))<CR>
map <Leader>dt :call VimuxRunCommand("clear; docker-compose exec test bin/rails test " . fnamemodify(expand("%"), ":~:."))<CR>
map <Leader>rp :call VimuxRunCommand("clear; bin/prontoci run")<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vs :VimuxInterruptRunner<CR>

" Misc maps
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
