set nocompatible
set modelines=0

" Always display the statusline in all windows
set laststatus=2
" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" alternatively, pass a path where Vundle should install plugins
" let path = '~/some/path/here'
" call vundle#rc(path)

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'

" Forked for a fix of sign column highlighting
Bundle 'kaihowl/vim-colors-solarized'
Bundle 'kaihowl/vim-indent-sentence'
Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'kchmck/vim-coffee-script'
Bundle 'scrooloose/syntastic'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'kaihowl/vim-latex'
Bundle 'godlygeek/tabular'
Bundle 'justinmk/vim-sneak'
Bundle 'airblade/vim-gitgutter'
Bundle 'Cpp11-Syntax-Support'
Bundle 'majutsushi/tagbar'

syntax enable
set background=light
colorscheme solarized

set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

set wildignore+=*/node_modules/*,*.aux,*.d,*.o

" Enable indent guides per default
let g:indent_guides_enable_on_vim_startup = 1

" Use powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

"set laststatus=2
"set background=dark
"let g:airline_theme='solarized'
"set t_Co=256

" Shamelessly copied from Steve Losh's vimrc
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" First off, some standard settings, making vim more 'sane'
set encoding=utf-8
set scrolloff=3
set autoindent
set wildmenu
set ttyfast
set relativenumber
set undofile
set noautochdir

let mapleader = ","

" fix vim's default regex handling / search behavior
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" handle lines intelligently
set wrap
set textwidth=79
set formatoptions+=qrn1
set colorcolumn=81

" set default chars for whitespace in list chars
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

" Silent command
command! -nargs=1 Silent
      \ | execute ':silent '.<q-args>
      \ | execute ':redraw!'

" Fugitive mappings
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>ge :Gedit<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gru :Git rebase @{u}<cr>
nnoremap <leader>gri :Git rebase -i @{u}<cr>
nnoremap <leader>g- :Silent Git stash -u<cr>:windo e<cr>
nnoremap <leader>g+ :Silent Git stash pop<cr>:windo e<cr>

" Dispatch mappings
nnoremap <leader>gp :Disp git push<cr>
nnoremap <leader>gf :Disp git fetch<cr>

" customize ctrlp plugin
let g:ctrlp_extensions = ['line', 'mixed']
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <c-l> :CtrlPLine<cr>

" easier escaping
inoremap jj <ESC>

" python pep8 compliance
au BufEnter *.py set sw=4 ts=4 sta et fo=croql

" Syntastic settings
let g:syntastic_cpp_no_include_search = 1
let g:syntastic_cpp_compiler_options="-std=c++11"
" Ignore certain syntastic latex warnings
let g:syntastic_quiet_messages={"regex": "Do not use @ in LaTeX macro names."}
let g:syntastic_python_checkers = ['python', 'pyflakes', 'pep8']
let g:syntastic_always_populate_loc_list = 1

" Make mappings
if filereadable('/proc/cpuinfo')
  let &makeprg = 'make -j'.(system('grep -c ^processor /proc/cpuinfo')+1)
endif
nnoremap <leader>mm :Make<cr>
nnoremap <leader>mc :Make clean<cr>
" For latex file run latex instead of makefile
au FileType tex nnoremap <buffer> <leader>mm :silent! call Tex_RunLaTeX()<CR>

" Sudo after the fact
cmap w!! w !sudo tee % >/dev/null

set pastetoggle=<leader>p

" Make sure latex-suite is invoked for plaintex files
let g:tex_flavor='latex'

" Configure pdf format for latex-suite
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
let g:Tex_ViewRule_pdf = 'Skim'

" Set more sensible ignore warning level for latex-suite
" ensures that missing numbers, undefined references, and citations are shown
let g:Tex_IgnoreLevel = 4

" Change default alt mappings for latex-suite to mac friendly ones
imap <leader>lb <Plug>Tex_MathBF
imap <leader>lc <Plug>Tex_MathCal
imap <leader>ll <Plug>Tex_LeftRight
imap <leader>li <Plug>Tex_InsertItemOnThisLine

" Blindly robbed from Janus vim.rc
" https://github.com/rdeits/janus/blob/master/vimrc
" Calculate the number of screen lines needed to display a file with folds at
" the given fold_level. This is used to set the initial fold level of a file
" in order to display the entire file on screen if possible without closing
" any unnecessary folds.
function! ScreenLines(fold_level)
  let line_num = 1
  let screen_lines = 0
  let prev_fold_level = 0
  let cur_fold_level = 0
  let buf_length = line("$")
  while line_num <= buf_length
    let fold_expr = foldlevel(line_num)
    let prev_fold_level = cur_fold_level
    let cur_fold_level = fold_expr
    if (cur_fold_level <= a:fold_level) || ((cur_fold_level != prev_fold_level) && (prev_fold_level <= a:fold_level))
      let screen_lines = screen_lines + 1
    endif
      let line_num = line_num+1
   endwhile
   return screen_lines
endfunction

" Increase the fold level until the entire file will fit on the screen or
" foldlevel reaches 10, whichever comes first.
function! FoldToScreen()
  let ndx = 0
  set foldlevel=0
  while ndx < 10
    let ndx = ndx + 1
    if ScreenLines(ndx) > &lines
      break
    endif
    set foldlevel+=1
  endwhile
endfunction

autocmd BufWinEnter *.tex call FoldToScreen()

" Function to break lines in tex files on period(.) and wrap to colorcolumn
" This makes version control for latex files easier since git is line-based
command! -range LineBreakTexSource :silent! <line1>,<line2>s/\. /.\r/g | :<line1>,<line2>normal gw | :noh<cr>

" Comment out, if you need to debug latex-suite
"let g:Tex_Debug=1
"let g:Tex_DebugLog="texdebug.log"

" Allow to delete old characters in insert mode
" Also needed that latex-suite will be able to delete placeholders
set backspace=2

" enable spellchecking for git commits
au FileType gitcommit setlocal spell
" and for markdown files
au FileType markdown setlocal spell
" and for tex files
au FileType tex setlocal spell
au FileType tex syntax spell toplevel

" Indent-sentence mapping
" For paragraph, restore position using register T
nnoremap <leader>ip i//CURSOR//<esc>vip :call g:IndentSentence()<cr>:%s/\/\/CURSOR\/\///<cr>
vnoremap <leader>is :call g:IndentSentence()<cr>

" gitgutter configuration
" explicitly set hunk navigation commands
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" add file in current dir explore shortcut
nmap <leader>f :e %:h<cr>
