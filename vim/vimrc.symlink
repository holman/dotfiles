call pathogen#infect()
syntax enable
filetype plugin indent on

set noswapfile

" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

set background=dark
" colorscheme solarized

let mapleader=","       " remap leader key
set nocompatible
set encoding=utf-8
set backspace=start,eol,indent " fix issue where Delete wasn't being recognized
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

set showtabline=2         " show tabs
set autoindent            " automatic indent new lines
set smartindent           " be smart about it
set nowrap                " do not wrap lines
set softtabstop=2         " # of columns used Tabbing in insert
set shiftwidth=2          " # of columns used when using << or >>
set tabstop=2             " # of columns a tab counts as
" set expandtab           " tab in insert mode uses spaces
set ruler                 " show the cursor position at all times
set number                " show line numbers
set ch=1                  " set command area height
set whichwrap+=<,>,h,l,[,]  " backspace and cursor keys wrap lines
set scrolloff=8           " keep 8 lines above and below cursor

set showmatch             " bracket/brace highlighting
set hlsearch              " highlight searches

set nolazyredraw          " turn off lazy redraw
set ttyfast               " always assume a fast connection

" highlight current line
set cursorline

" Donâ€™t keep results highlighted after searching...
set nohlsearch

" ...just highlight as we type
set incsearch


" Ignore case when searching...
set ignorecase

" ...except if we input a capital letter
set smartcase

" Indent if we're at the beginning of a line. Else, do completion.
" (from Destroy All Software)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" map <S-b> ^
" map <S-w> $

" Strip all trailing whitespace in file
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
command! StripWhitespace :%s/\s\+$

" Automatically removed whitespace when saving file
" autocmd BufWritePre * :%s/\s\+$//e
