let mapleader = "\<Space>"

" ===========================================================================================================
" Plugins
" ===========================================================================================================
" {{{
call plug#begin('~/.vim/plugged')

" General utilities
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'svermeulen/vim-easyclip'
Plug 'jiangmiao/auto-pairs'
Plug 'bronson/vim-visual-star-search'
Plug 'justinmk/vim-sneak'
Plug 'neomake/neomake' "{{{
    "run neomake on the current file on every write:<Paste>
    autocmd! BufWritePost * Neomake
    let g:neomake_javascript_enabled_makers = ['eslint']
" }}}
Plug 'tpope/vim-fugitive', "{{{
    nnoremap gb :Gblame<cr>
    nnoremap gs :Gstatus<cr>
    nnoremap gd :Gdiff<cr>
" }}}

"Visual utilities
Plug 'vim-airline/vim-airline' "{{{
    " Set colour scheme for airline (powerline alternative)
    let g:airline_theme='powerlineish'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_tab_nr = 1
    let g:airline#extensions#tabline#show_tab_type = 1
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#tab_min_count = 0
    let g:airline#extensions#tabline#buffer_min_count = 0
    let g:airline#extensions#tabline#formatter = 'unique_tail'
" }}}

Plug 'vim-airline/vim-airline-themes'

" File browsing
Plug 'scrooloose/nerdtree' "{{{
    noremap <leader>l :NERDTreeFind<cr>
    noremap <leader>k :NERDTreeToggle<cr>
    if has("gui_vimr")
        " VIMR allows binding to cmd"
        noremap <D-k><D-b> :NERDTreeToggle<cr>
    else
        noremap <C-k><C-b> :NERDTreeToggle<cr>
    endif


    let NERDTreeChDirMode=1
    let NERDTreeHighlightCursorline=1
    let NERDTreeMapActivateNode='<space>'
    let NERDTreeMinimalUI=1
    let NERDTreeShowHidden=1
" }}}
Plug 'tyok/nerdtree-ack'
Plug 'ctrlpvim/ctrlp.vim' "{{{
    if has("gui_vimr")
        " VIMR allows binding to cmd"
        nnoremap <D-p> :CtrlP<cr>
        nnoremap <D-b> :CtrlPBuffer<cr>
    endif

    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

    " close prompt on backspace or <c-h>
    let g:ctrlp_brief_prompt = 1
    let g:ctrlp_switch_buffer = 'Et'
    let g:ctrlp_prompt_mappings = {
        \ 'PrtDeleteEnt()':       ['<C-d>'],
        \ }
" }}}
Plug 'mileszs/ack.vim'
if executable('ag')
    " Use ag over grep
    let g:ackprg = 'ag --nogroup --nocolor --vimgrep --smart-case'
endif

" Tmux pane interaction
Plug 'christoomey/vim-tmux-navigator',
    let g:tmux_navigator_no_mappings = 1
    let g:tmux_navigator_disable_when_zoomed = 1

    nnoremap <silent> <C-j> :TmuxNavigateLeft<cr>
    nnoremap <silent> <C-k> :TmuxNavigateDown<cr>
    nnoremap <silent> <C-l> :TmuxNavigateUp<cr>
    nnoremap <silent> <C-h> :TmuxNavigateRight<cr>
    nnoremap <silent> <C-;> :TmuxNavigateRight<cr>

Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'

"Code level utilities
Plug 'airblade/vim-gitgutter' " {{{
    let g:gitgutter_eager = 0
"}}}
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips' "{{{
    let g:UltiSnipsEditSplit="vertical"
    " https://github.com/SirVer/ultisnips/issues/710
    let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" }}}
Plug 'Shougo/deoplete.nvim', { 'do': 'UpdateRemotePlugins' } "{{{
    autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
    set completeopt=longest,menuone,preview
    let g:deoplete#sources = {}
    let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni_patterns = {}
    let g:deoplete#omni#functions = {}
    let g:deoplete#omni#functions.javascript = [
        \ 'tern#Complete',
        \ 'jspc#omni'
        \]
    autocmd CompleteDone * if pumvisible() == 0 | pclose | endif

    " Use tab as the autocomplete trigger
    inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" }}}
Plug 'tpope/vim-commentary' "{{{
    if has("gui_vimr")
        " VIMR allows binding to cmd"
        nnoremap <D-/> :Commentary<cr>
        vnoremap <D-/> :Commentary<cr>
    else 
        " Terminal keybinding
        " ctrl-/ is for some reason being sent as ctrl-_
        " got the keybinding from just pressing the combo in insert mode
        nnoremap  :Commentary<cr>
        vnoremap  :Commentary<cr>
    endif
" }}}

" Javascript utilities
" Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax', { 'for': ['javascript', 'javascript.jsx']  }
Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx']  }
Plug 'ternjs/tern_for_vim', {'do': 'npm install'} "{{{
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
" }}}
Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx']  }

" Shell utilities
Plug 'dag/vim-fish'

call plug#end()
" }}}
" ===========================================================================================================
" Editor settings
" ===========================================================================================================
" {{{

" Save whenever switching windows or leaving vim. This is useful when running the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa
" Trigger autoread when changing buffers or coming back to vim.
au FocusGained,BufEnter * :silent! !

" set lazyredraw
set nobackup
set noswapfile
set autoread                    " automatically reload files changed outside of Vim
scriptencoding utf-8

set ignorecase
set smartcase

set clipboard=unnamed

" Indentation rules {{{
set tabstop=4                   " a tab is four spaces
set softtabstop=4               " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab                   " expand tabs by default (overloadable per file type later)
set shiftwidth=4                " number of spaces to use for autoindenting
set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start  " Backspace for dummies
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
" }}}

set nowrap                      " don't wrap lines
set list
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set scrolloff=5                 " keep 4 lines off the edges of the screen when scrolling

set relativenumber              " Enable relative line numbering
set number                      " Enable current line number

set splitright                  " Create new vertical splits on the right hand side
set splitbelow                  " Create new horizontal splits below
set diffopt+=vertical           " Open diff splits vertically rather than horizontal default

" set syntax colour scheme to monokai
colorscheme molokai

augroup dotfiles
    autocmd BufNewFile,BufRead *.mustache* set syntax=html
    autocmd BufNewFile,BufRead *tmux.conf* set syntax=tmux
    autocmd BufNewFile,BufRead Brewfile set syntax=ruby
augroup end

" }}}
" ===========================================================================================================
" Personal Keybindings
" ===========================================================================================================
" {{{

" when in insert mode, press <F2> to go to
" paste mode, where you can paste mass data
" that won't be autoindented
set pastetoggle=<F2>

" Reselect previous selection after indenting
vnoremap > >gv
vnoremap < <gv

" Edit and load .vimrc
nnoremap <leader>ve :tabedit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" Clear the highlighted search results
nnoremap <leader>/ :nohlsearch<cr>

" Split vertically or horizontally using tmux bindings
" Some co-op between vim and tmux bindings is necessary to get this working
if has("gui_vimr")
    nnoremap <C-a>- :split<cr>
    nnoremap <C-a>\ :vsplit<cr>
    nnoremap <C-a>x :close<cr>
endif

" Move hjkl navigation to touch type rest position
noremap j h
noremap k j
noremap l k
noremap ; l
noremap h ;

" enables magic mode in regular expressions
" :help /magic
nnoremap / /\v
vnoremap / /\v
" Search on cmd-f
nnoremap <D-f> /\v

" Jump 5 lines at a time. useful for keyboard scrolling the cursor.
noremap <S-k> 5j
noremap <S-l> 5k

" Tab controls. Awesomeness engaged.
nnoremap <C-a><C-p> :tabprevious<cr>
nnoremap <C-a>p :tabprevious<cr>
nnoremap <C-a><C-n> :tabnext<cr>
nnoremap <C-a>n :tabnext<cr>

" General ease of use
" Save on cmd-s. 
if has("gui_vimr")
    " VIMR allows binding to cmd"
    nnoremap <D-s> :w<cr>
    vnoremap <D-s> <C-C>:w<cr>
    inoremap <D-s> <Esc>:w<cr>
else 
    " Terminal keybinding, iterm sends ctrl-s for cmd-s
    nnoremap <C-s> :w<cr>
    vnoremap <C-s> <C-C>:w<cr>
    inoremap <C-s> <Esc>:w<cr>
endif

" Let escape leave terminal buffer
" Returns to normal mode, making all vim keybindings come back to life
" neovim only
if(has('nvim'))
    tnoremap <Esc> <C-\><C-n>
    tnoremap <S-H> <C-\><C-n>:tabprevious<cr>
    tnoremap <S-L> <C-\><C-n>:tabnext<cr>
endif

" Scroll screen so that cursor is in the center after searches
nnoremap n nzz
nnoremap N Nzz
" }}}

" Utility functions for managing tabs
" Seriously awesome stuff
function! MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function! MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

nnoremap <D-Left> :call MoveToPrevTab()<cr>
nnoremap <D-Right> :call MoveToNextTab()<cr>


let g:python_host_prog='/Users/muneeb/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog='/Users/muneeb/.pyenv/versions/neovim3/bin/python'
