" Install vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'KabbAmine/zeavim.vim'
Plug 'tpope/vim-bundler'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'              " Adds end to methods for if's etc.
Plug 'tomtom/tcomment_vim'            " Commentor
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'pangloss/vim-javascript'
Plug 'elixir-lang/vim-elixir'
Plug 'tpope/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'elzr/vim-json'
Plug 'mxw/vim-jsx'
Plug 'itchyny/lightline.vim'
Plug 'w0rp/ale'
Plug 'maximbaz/lightline-ale'
Plug 'mileszs/ack.vim'
Plug 'benmills/vimux'
Plug 'arcticicestudio/nord-vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'posva/vim-vue'
Plug 'majutsushi/tagbar'
Plug 'rizzatti/dash.vim'

" Add local plugins that you don't really want
" in your repo, here (maybe work stuff)
try
  source ~/.vimplugins.local
catch
  "Unable to open vimplugins.local"
endtry

call plug#end()

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

if (has("termguicolors"))
 set termguicolors
endif

set background=dark
colorscheme nord


"  ---------------------------------------------------
"  TEXT FORMATTING
"  ---------------------------------------------------
set autoindent        " automatic indent new lines
set smartindent       " be smart about it
inoremap # X<BS>#
set nowrap            " do not wrap lines
set softtabstop=2     " yep, two
set shiftwidth=2      " ..
set tabstop=2
set expandtab         " expand tabs to spaces
set nosmarttab        " no tabs
set formatoptions+=n  " support for numbered/bullet lists
set textwidth=90      " wrap at 90 chars by default
set virtualedit=block " allow virtual edit in visual block ..
set mouse=a           " enable mouse in term                  "
set wildmenu

"  ----------------------------------------------------
"  REMAPPING
"  ----------------------------------------------------
" , as leader
let mapleader = ','

" exit to normal mode with jj
inoremap jj <ESC>


" reload vim <Leader>s
map <leader>rld :source ~/.vimrc<CR>

" Movement around panes CTRL-<letter>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <Leader><Leader> :e#<CR> " Reopen last file
nnoremap <Leader>w :w<CR> " <Leader>w will save
nnoremap <Leader>qc :ccl<CR> " close quick fix window

nnoremap <silent> <leader>nb :set relativenumber!<CR>

set relativenumber                                  " default to relative line numbers
set ruler                                           " show the cursor position all the time
set noshowcmd                                       " don't display incomplete commands
set nolazyredraw                                    " turn off lazy redraw
set number                                          " line numbers
set wildmenu                                        " turn on wild menu
set wildmode=list:longest,full
set ch=2                                            " command line height
set backspace=2                                     " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,]                          " backspace and cursor keys wrap to
set shortmess=filtIoOA                              " shorten messages
set report=0                                        " tell us about changes
set nostartofline                                   " don't jump to the start of line when scrolling
set showmatch                                       " brackets/braces that is
set mat=5                                           " duration to show matching brace (1/10 sec)
set incsearch                                       " do incremental searching
set laststatus=2                                    " always show the status line
set ignorecase                                      " ignore case when searching
set visualbell                                      " shut up
set smartcase                                       " if we add uppercase when searching it will find that
set winwidth=90                                     " minimum split window width
set noswapfile                                      " don't create .swp files
set nocompatible
set guifont=Roboto\ Mono\ Light\ for\ Powerline:h14

syntax on

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
nmap <silent> <C-D> :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>

" ------- PLUGIN CONFIGS ------- "

" NERDTREE
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp']
let NERDTreeQuitOnOpen=1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

" map NERDTreeToggle to nn
noremap <Leader>nn :NERDTreeToggle<cr>

" CTRL-P"
nnoremap <silent> ,s :CtrlP<CR>
nnoremap <silent> ,b :CtrlPBuffer<CR>
let g:ctrlp_by_filename = 1
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" MAPPINGS FOR RAILS APPS "
map ,ja :CtrlP app/assets<CR>
map ,jc :CtrlP app/controllers<CR>
map ,jh :CtrlP app/helpers<CR>
map ,ji :CtrlP app/interactors<CR>
map ,jb :CtrlP app/jobs<CR>
map ,jm :CtrlP app/models<CR>
map ,jp :CtrlP app/policies<CR>
map ,jP :CtrlP app/presenters<CR>
map ,js :CtrlP app/services<CR>
map ,jt :CtrlP app/tasks<CR>
map ,jv :CtrlP app/views<CR>
map ,jC :CtrlP config<CR>
map ,jD :CtrlP db<CR>
map ,jF :CtrlP factories<CR>
map ,jL :CtrlP lib<CR>
map ,jS :CtrlP spec<CR>
map ,jT :CtrlP test<CR>
map ,jV :CtrlP vendor<CR>

" Easier rails movement
nnoremap ,vv :Eview<cr>
nnoremap ,cc :Econtroller<cr>
nnoremap ,rA :AV<cr>
nnoremap ,ra :A<cr>

" Easier window splits
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" Type ,hl to toggle highlighting on/off, and show current value.
noremap ,hl :set hlsearch! hlsearch?<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>

" Automatically trim trailing whitespace
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

autocmd BufWritePre * :%s#\($\n\s*\)\+\%$##e"

" --- Tabular.vim ---
noremap <silent> <leader>t: :Tabularize /:<CR>
noremap <silent> <leader>t= :Tabularize /=<CR>
noremap <silent> <leader>t, :Tabularize /,<CR>
noremap <silent> <leader>t{ :Tabularize /{<CR>
noremap <silent> <leader>t" :Tabularize /"<CR>
noremap <silent> <leader>t' :Tabularize /'<CR>
noremap <silent> <leader>t[ :Tabularize /[<CR>
noremap <silent> <leader>t/ :Tabularize ///<CR>
noremap <silent> <leader>t\| :Tabularize /\|<CR>

" --- Zeal.vim ---
:nmap <silent> <leader>d <Plug>DashSearch
nmap <leader>d <Plug>DashSearch

" --- ctags ---
set tags=./.git/tags;~/Development
nnoremap <leader>ct :silent ! ctags -R --languages=-sql --exclude=.git --exclude=log --exclude=node_modules --exclude=tmp -f .git/tags<cr>

" --- ale ---
let g:airline#extensions#ale#enabled = 1

" Ack.vim
let g:ackhighlight = 1 " Highlight the current ack search
let g:ack_autofold_results = 1 " Folds by filename until stepping through the quick fix list
let g:ack_use_cword_for_empty_search = 0 " Search for cword on blank :Ack
if executable('ag')
  " Use the silver searcher when available
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Commands to run tests with vimux
" Remove current local dir from bufname?
map <Leader>rs :call VimuxRunCommand("clear; bundle exec rspec s . bufname("%"))<CR>
map <Leader>rt :call VimuxRunCommand("clear; bundle exec rails test " . bufname("%"))<CR>
map <Leader>dt :call VimuxRunCommand("clear; docker-compose exec test bin/rails test " . fnamemodify(expand("%"), ":~:."))<CR>
map <Leader>rp :call VimuxRunCommand("clear; bin/pronto run")<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vs :VimuxInterruptRunner<CR>

" Misc maps
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
