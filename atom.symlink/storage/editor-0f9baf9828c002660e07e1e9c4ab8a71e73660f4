{"version":1,"windowDimensions":{"x":120,"y":23,"width":1024,"height":777,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/cesco/.oh-my-zsh"],"buffers":[{"text":"# Check for updates on initial load...\nif [ \"$DISABLE_AUTO_UPDATE\" != \"true\" ]; then\n  env ZSH=$ZSH DISABLE_UPDATE_PROMPT=$DISABLE_UPDATE_PROMPT zsh -f $ZSH/tools/check_for_upgrade.sh\nfi\n\n# Initializes Oh My Zsh\n\n# add a function path\nfpath=($ZSH/functions $ZSH/completions $fpath)\n\n# Load all stock functions (from $fpath files) called below.\nautoload -U compaudit compinit\n\n: ${ZSH_DISABLE_COMPFIX:=true}\n\n# Set ZSH_CUSTOM to the path where your custom config files\n# and plugins exists, or else we will use the default custom/\nif [[ -z \"$ZSH_CUSTOM\" ]]; then\n    ZSH_CUSTOM=\"$ZSH/custom\"\nfi\n\n# Set ZSH_CACHE_DIR to the path where cache files should be created\n# or else we will use the default cache/\nif [[ -z \"$ZSH_CACHE_DIR\" ]]; then\n  ZSH_CACHE_DIR=\"$ZSH/cache/\"\nfi\n\n\n# Load all of the config files in ~/oh-my-zsh that end in .zsh\n# TIP: Add files you don't want in git to .gitignore\nfor config_file ($ZSH/lib/*.zsh); do\n  custom_config_file=\"${ZSH_CUSTOM}/lib/${config_file:t}\"\n  [ -f \"${custom_config_file}\" ] && config_file=${custom_config_file}\n  source $config_file\ndone\n\n\nis_plugin() {\n  local base_dir=$1\n  local name=$2\n  test -f $base_dir/plugins/$name/$name.plugin.zsh \\\n    || test -f $base_dir/plugins/$name/_$name\n}\n# Add all defined plugins to fpath. This must be done\n# before running compinit.\nfor plugin ($plugins); do\n  if is_plugin $ZSH_CUSTOM $plugin; then\n    fpath=($ZSH_CUSTOM/plugins/$plugin $fpath)\n  elif is_plugin $ZSH $plugin; then\n    fpath=($ZSH/plugins/$plugin $fpath)\n  fi\ndone\n\n# Figure out the SHORT hostname\nif [[ \"$OSTYPE\" = darwin* ]]; then\n  # OS X's $HOST changes with dhcp, etc. Use ComputerName if possible.\n  SHORT_HOST=$(scutil --get ComputerName 2>/dev/null) || SHORT_HOST=${HOST/.*/}\nelse\n  SHORT_HOST=${HOST/.*/}\nfi\n\n# Save the location of the current completion dump file.\nif [ -z \"$ZSH_COMPDUMP\" ]; then\n  ZSH_COMPDUMP=\"${ZDOTDIR:-${HOME}}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}\"\nfi\n\nif [[ $ZSH_DISABLE_COMPFIX != true ]]; then\n  # If completion insecurities exist, warn the user without enabling completions.\n  if ! compaudit &>/dev/null; then\n    # This function resides in the \"lib/compfix.zsh\" script sourced above.\n    handle_completion_insecurities\n  # Else, enable and cache completions to the desired file.\n  else\n    compinit -d \"${ZSH_COMPDUMP}\"\n  fi\nelse\n  compinit -i -d \"${ZSH_COMPDUMP}\"\nfi\n\n# Load all of the plugins that were defined in ~/.zshrc\nfor plugin ($plugins); do\n  if [ -f $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh ]; then\n    source $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh\n  elif [ -f $ZSH/plugins/$plugin/$plugin.plugin.zsh ]; then\n    source $ZSH/plugins/$plugin/$plugin.plugin.zsh\n  fi\ndone\n\n# Load all of your custom configurations from custom/\nfor config_file ($ZSH_CUSTOM/*.zsh(N)); do\n  source $config_file\ndone\nunset config_file\n\n# Load the theme\nif [ \"$ZSH_THEME\" = \"random\" ]; then\n  themes=($ZSH/themes/*zsh-theme)\n  N=${#themes[@]}\n  ((N=(RANDOM%N)+1))\n  RANDOM_THEME=${themes[$N]}\n  source \"$RANDOM_THEME\"\n  echo \"[oh-my-zsh] Random theme '$RANDOM_THEME' loaded...\"\nelse\n  if [ ! \"$ZSH_THEME\" = \"\"  ]; then\n    if [ -f \"$ZSH_CUSTOM/$ZSH_THEME.zsh-theme\" ]; then\n      source \"$ZSH_CUSTOM/$ZSH_THEME.zsh-theme\"\n    elif [ -f \"$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme\" ]; then\n      source \"$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme\"\n    else\n      source \"$ZSH/themes/$ZSH_THEME.zsh-theme\"\n    fi\n  fi\nfi\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":0,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":14,"column":0},"end":{"row":14,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":3,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/cesco/.oh-my-zsh/oh-my-zsh.sh","digestWhenLastPersisted":"6ea550025fc530eb3af6afaa013c18c0e4f1f3f5","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/cesco/.oh-my-zsh/oh-my-zsh.sh","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/cesco/.oh-my-zsh/oh-my-zsh.sh","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-shellscript","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/cesco/.oh-my-zsh/lib/theme-and-appearance.zsh"]},"packageStates":{"fuzzy-finder":{"/Users/cesco/.oh-my-zsh/oh-my-zsh.sh":1451673433869},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/cesco/.oh-my-zsh":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"cache":{"isExpanded":false,"entries":{}},"custom":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":true,"entries":{}},"log":{"isExpanded":false,"entries":{}},"plugins":{"isExpanded":false,"entries":{}},"templates":{"isExpanded":false,"entries":{}},"themes":{"isExpanded":false,"entries":{}},"tools":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/cesco/.oh-my-zsh/oh-my-zsh.sh","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}