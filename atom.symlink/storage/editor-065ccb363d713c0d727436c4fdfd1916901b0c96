{"version":1,"windowDimensions":{"x":418,"y":65,"width":1024,"height":777,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/cesco/.oh-my-zsh/themes"],"buffers":[{"text":"# vim:ft=zsh ts=2 sw=2 sts=2\n#\n# agnoster's Theme - https://gist.github.com/3712874\n# A Powerline-inspired theme for ZSH\n#\n# # README\n#\n# In order for this theme to render correctly, you will need a\n# [Powerline-patched font](https://github.com/Lokaltog/powerline-fonts).\n# Make sure you have a recent version: the code points that Powerline\n# uses changed in 2012, and older versions will display incorrectly,\n# in confusing ways.\n#\n# In addition, I recommend the\n# [Solarized theme](https://github.com/altercation/solarized/) and, if you're\n# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -\n# it has significantly better color fidelity.\n#\n# # Goals\n#\n# The aim of this theme is to only show you *relevant* information. Like most\n# prompts, it will only show git information when in a git working directory.\n# However, it goes a step further: everything from the current user and\n# hostname to whether the last call exited with an error to whether background\n# jobs are running in this shell will all be displayed automatically when\n# appropriate.\n\n### Segment drawing\n# A few utility functions to make it easy and re-usable to draw segmented prompts\n\nCURRENT_BG='NONE'\n\n# Special Powerline characters\n\n() {\n  local LC_ALL=\"\" LC_CTYPE=\"en_US.UTF-8\"\n  # NOTE: This segment separator character is correct.  In 2012, Powerline changed\n  # the code points they use for their special characters. This is the new code point.\n  # If this is not working for you, you probably have an old version of the\n  # Powerline-patched fonts installed. Download and install the new version.\n  # Do not submit PRs to change this unless you have reviewed the Powerline code point\n  # history and have new information.\n  # This is defined using a Unicode escape sequence so it is unambiguously readable, regardless of\n  # what font the user is viewing this source code in. Do not replace the\n  # escape sequence with a single literal character.\n  # Do not change this! Do not make it '\\u2b80'; that is the old, wrong code point.\n  SEGMENT_SEPARATOR=$'\\ue0b0'\n}\n\n# Begin a segment\n# Takes two arguments, background and foreground. Both can be omitted,\n# rendering default background/foreground.\nprompt_segment() {\n  local bg fg\n  [[ -n $1 ]] && bg=\"%K{$1}\" || bg=\"%k\"\n  [[ -n $2 ]] && fg=\"%F{$2}\" || fg=\"%f\"\n  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then\n    echo -n \" %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} \"\n  else\n    echo -n \"%{$bg%}%{$fg%} \"\n  fi\n  CURRENT_BG=$1\n  [[ -n $3 ]] && echo -n $3\n}\n\n# End the prompt, closing any open segments\nprompt_end() {\n  if [[ -n $CURRENT_BG ]]; then\n    echo -n \" %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR\"\n  else\n    echo -n \"%{%k%}\"\n  fi\n  echo -n \"%{%f%}\"\n  CURRENT_BG=''\n}\n\n### Prompt components\n# Each component will draw itself, and hide itself if no information needs to be shown\n\n# Context: user@hostname (who am I and where am I)\nprompt_context() {\n  if [[ \"$USER\" != \"$DEFAULT_USER\" || -n \"$SSH_CLIENT\" ]]; then\n    prompt_segment black default \"%(!.%{%F{yellow}%}.)$USER@%m\"\n  fi\n}\n\n# Git: branch/detached head, dirty status\nprompt_git() {\n\n  local PL_BRANCH_CHAR\n  () {\n    local LC_ALL=\"\" LC_CTYPE=\"en_US.UTF-8\"\n    PL_BRANCH_CHAR=$'\\ue0a0'         # \n  }\n  local ref dirty mode repo_path\n  repo_path=$(git rev-parse --git-dir 2>/dev/null)\n\n  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then\n    dirty=$(parse_git_dirty)\n    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref=\"➦ $(git rev-parse --short HEAD 2> /dev/null)\"\n    if [[ -n $dirty ]]; then\n      prompt_segment yellow black\n    else\n      prompt_segment green black\n    fi\n\n    if [[ -e \"${repo_path}/BISECT_LOG\" ]]; then\n      mode=\" <B>\"\n    elif [[ -e \"${repo_path}/MERGE_HEAD\" ]]; then\n      mode=\" >M<\"\n    elif [[ -e \"${repo_path}/rebase\" || -e \"${repo_path}/rebase-apply\" || -e \"${repo_path}/rebase-merge\" || -e \"${repo_path}/../.dotest\" ]]; then\n      mode=\" >R>\"\n    fi\n\n    setopt promptsubst\n    autoload -Uz vcs_info\n\n    zstyle ':vcs_info:*' enable git\n    zstyle ':vcs_info:*' get-revision true\n    zstyle ':vcs_info:*' check-for-changes true\n    zstyle ':vcs_info:*' stagedstr '✚'\n    zstyle ':vcs_info:*' unstagedstr '●'\n    zstyle ':vcs_info:*' formats ' %u%c'\n    zstyle ':vcs_info:*' actionformats ' %u%c'\n    vcs_info\n    echo -n \"${ref/refs\\/heads\\//$PL_BRANCH_CHAR }${vcs_info_msg_0_%% }${mode}\"\n  fi\n}\n\nprompt_hg() {\n  local rev status\n  if $(hg id >/dev/null 2>&1); then\n    if $(hg prompt >/dev/null 2>&1); then\n      if [[ $(hg prompt \"{status|unknown}\") = \"?\" ]]; then\n        # if files are not added\n        prompt_segment red white\n        st='±'\n      elif [[ -n $(hg prompt \"{status|modified}\") ]]; then\n        # if any modification\n        prompt_segment yellow black\n        st='±'\n      else\n        # if working copy is clean\n        prompt_segment green black\n      fi\n      echo -n $(hg prompt \"☿ {rev}@{branch}\") $st\n    else\n      st=\"\"\n      rev=$(hg id -n 2>/dev/null | sed 's/[^-0-9]//g')\n      branch=$(hg id -b 2>/dev/null)\n      if `hg st | grep -q \"^\\?\"`; then\n        prompt_segment red black\n        st='±'\n      elif `hg st | grep -q \"^[MA]\"`; then\n        prompt_segment yellow black\n        st='±'\n      else\n        prompt_segment green black\n      fi\n      echo -n \"☿ $rev@$branch\" $st\n    fi\n  fi\n}\n\n# Dir: current working directory\nprompt_dir() {\n  prompt_segment blue black '%~'\n}\n\n# Virtualenv: current working virtualenv\nprompt_virtualenv() {\n  local virtualenv_path=\"$VIRTUAL_ENV\"\n  if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then\n    prompt_segment blue black \"(`basename $virtualenv_path`)\"\n  fi\n}\n\n# Status:\n# - was there an error\n# - am I root\n# - are there background jobs?\nprompt_status() {\n  local symbols\n  symbols=()\n  [[ $RETVAL -ne 0 ]] && symbols+=\"%{%F{red}%}✘\"\n  [[ $UID -eq 0 ]] && symbols+=\"%{%F{yellow}%}⚡\"\n  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+=\"%{%F{cyan}%}⚙\"\n\n  [[ -n \"$symbols\" ]] && prompt_segment black default \"$symbols\"\n}\n\n## Main prompt\nbuild_prompt() {\n  RETVAL=$?\n  prompt_status\n  prompt_virtualenv\n  prompt_context\n  prompt_dir\n  prompt_git\n  prompt_hg\n  prompt_end\n}\n\nPROMPT='%{%f%b%k%}$(build_prompt) '\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":0,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":200,"column":12},"end":{"row":200,"column":12}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":1,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/cesco/.oh-my-zsh/themes/agnoster.zsh-theme","digestWhenLastPersisted":"4b9cdd34373392ef8b4a14e1673c16c832ebbc2b","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":159,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/cesco/.oh-my-zsh/themes/agnoster.zsh-theme","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/cesco/.oh-my-zsh/themes/agnoster.zsh-theme","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"$(build_prompt)","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["$(build_prompt)"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/cesco/.oh-my-zsh/themes/agnoster.zsh-theme":1451670696559},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/cesco/.oh-my-zsh/themes":{"isExpanded":false,"entries":{}}},"selectedPath":"/Users/cesco/.oh-my-zsh/themes","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}