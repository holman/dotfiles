#!/usr/bin/env bash
#
# bootstrap installs things.

# cd "$(dirname "$0")/.."
# DOTFILES_ROOT=$(pwd -P)
DOTFILES_ROOT=~/.dotfiles

set -e

echo ''

info() {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user() {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig() {
  local_git_config="$HOME"/dropbox/config/dotfiles/git/symlink.gitconfig.local
  if [ -f "$local_git_config" ] && ! [ -f "$HOME"/.gitconfig.local ]; then
    src=local_git_config
    dst="$HOME"/.gitconfig.local
    link_file "$src" "$dst"
    success "Linked personal $src to $dst"
  fi

  if ! [ -f git/symlink.gitconfig.local ] && ! [ -f ~/.gitconfig.local ]; then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/example.symlink.gitconfig.local >git/symlink.gitconfig.local

    success 'gitconfig'
  fi
}

backup_file() {
  local dst=$1 print=$2
  mkdir -p "$HOME"/backup-dot-files"$dst"
  mv "$dst" "$HOME"/backup-dot-files"$dst"
  if [ "$print" == "true" ]; then
    success "moved $dst to $HOME/backup-dot-files"
  fi
}

link_file() {
  local src=$1 dst=$2

  local overwrite=
  local backup=
  local absorb=
  local skip=
  local action=

  # check if target exists and is symlink
  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" != "true" ] && [ "$backup_all" != "true" ] && [ "$absorb_all" != "true" ] && [ "$skip_all" != "true" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then

        skip=true

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [a]bsorb, [A]bsorb all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
        o)
          overwrite=true
          ;;
        O)
          overwrite_all=true
          ;;
        b)
          backup=true
          ;;
        B)
          backup_all=true
          ;;
        a)
          absorb=true
          ;;
        A)
          absorb_all=true
          ;;
        s)
          skip=true
          ;;
        S)
          skip_all=true
          ;;
        *) ;;

        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}
    absorb=${absorb:-$absorb_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      backup_file $dst "true"
    fi

    if [ "$absorb" == "true" ]; then
      true >"$src"
      cat "$dst" >>"$src"
      backup_file $dst "false"
      success "review changes in git - absorbed $dst to $src"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    parent=$(dirname "$2")
    if [ ! -d "$parent" ]; then
      mkdir -p "$parent"
    fi
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles() {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name 'symlink*' -not -path '.git/'); do
    # http://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
    # ignores first 7 characters 0-based
    dst=$(basename "$src")
    dst="${dst:7}"
    dst="$HOME/${dst//+//}"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles

# Lets run install files
if source bin/dot | while read -r data; do info "$data"; done; then
  success "dependencies installs"
else
  fail "error installing dependencies"
fi

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]; then
  info "Running on mac"
fi

info 'changing shell'
sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
success "All new sessions will use $SHELL"

echo ''
success '  All installed!'
