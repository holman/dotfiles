#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`/`dirname $0`"
DOTFILES_ROOT=${DOTFILES_ROOT%/script*}

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

alert () {
  printf "\r\033[2K  [ \033[0;31m!\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f $DOTFILES_ROOT/git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $DOTFILES_ROOT/git/gitconfig.symlink.example > $DOTFILES_ROOT/git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  if `ln -s $1 $2`; then
    success "linked $1 to $2"
  else
    return 1
  fi
  return 0
}

install_dotfiles () {
  info "installing dotfiles\n"

  overwrite_all=false
  backup_all=false
  local_all=false
  ignore_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      #Assume links already have been processed
      [ -L $dest ] && continue

      overwrite=false
      backup=false
      local_=false
      ignore=false

      if [ "$overwrite_all" == false ] && [ "$backup_all" == false ] && [ "$local_all" == false ] && [ "$ignore_all" == false ]
      then
        alert "File already exists: `basename $dest`, which file do you like to use (capital sets all)?"
        user "[l]ocal, [r]emote (overwrite), [i]ignore, [b]ackup and install remote  [b]"
        read -n 1 action

        case "$action" in
          r )
            overwrite=true;;
          R )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          l )
            local_=true;;
          L )
            local_all=true;;
          i )
            ignore=true;;
          I )
            ignore_all=true;;
          * )
            backup=true;;
        esac
      fi

      if [ "$ignore" == true ] || [ "$ignore_all" == true ]
      then
        continue
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        if `rm -rf $dest && ln -s $source $dest`; then
          success "removed `basename $dest` and linked it to `basename $source`"
          continue
        else
          fail "failed to remove $dest and link to $source"
        fi
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup && \
        success "moved $dest to $dest.backup"
        link_files $source $dest
      fi

      if [ "$local_" == true ] || [ "$local_all" == true ]
      then
        if `mv -f $dest $source && ln -s $source $dest`; then
          success "moved `basename $dest` to `basename $source` and linked it back to `basename $dest`"
        else
          fail "failed to move `basename $dest` to `basename $source` and link it back to `basename $dest`"
        fi
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if `. $DOTFILES_ROOT/bin/dot > /tmp/dotfiles-dot 2>&1`
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
