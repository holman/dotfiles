#!/usr/bin/env bash
#
# Bootstrap script for dotfiles installation
# This script handles the initial setup of your dotfiles

set -euo pipefail
IFS=$'\n\t'

DOTFILES_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Pretty output functions
info() { printf "\r\033[2K  [\033[00;34mINFO\033[0m] %s\n" "$1"; }
user() { printf "\r\033[2K  [\033[0;33m???\033[0m] %s " "$1"; }
success() { printf "\r\033[2K  [\033[00;32m OK \033[0m] %s\n" "$1"; }
fail() { printf "\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"; exit 1; }

setup_gitconfig() {
    if [[ ! -f git/gitconfig.symlink ]]; then
        info "Setting up gitconfig"

        # Use keychain on macOS, cache otherwise
        git_credential='cache'
        [[ "$(uname -s)" == "Darwin" ]] && git_credential='osxkeychain'

        # Get git user info
        user "What is your github author name?"
        read -r git_authorname
        user "What is your github author email?"
        read -r git_authoremail

        # Create gitconfig from template
        sed -e "s/AUTHORNAME/$git_authorname/g" \
            -e "s/AUTHOREMAIL/$git_authoremail/g" \
            -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
            git/gitconfig.template > git/gitconfig.symlink

        success "Created gitconfig"
    fi
}

link_file() {
    local src=$1 dst=$2
    local action=

    if [[ -f "$dst" ]] || [[ -d "$dst" ]] || [[ -L "$dst" ]]; then
        if [[ "$(readlink "$dst")" == "$src" ]]; then
            action="skipped"
        else
            user "File already exists: $(basename "$src"), [s]kip, [o]verwrite, [b]ackup?"
            read -n 1 action </dev/tty

            case "$action" in
                o) rm -rf "$dst"; action="overwritten";;
                b) mv "$dst" "${dst}.backup"; action="backed up";;
                s) action="skipped";;
                *) action="skipped";;
            esac
        fi
    else
        action="linked"
    fi

    if [[ "$action" != "skipped" ]]; then
        ln -s "$src" "$dst"
    fi
    success "$(printf "%12s" "$action") $src â†’ $dst"
}

install_dotfiles() {
    info "Installing dotfiles"

    # First, add a check for Homebrew
    if ! command -v brew >/dev/null 2>&1; then
        info "Installing Homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    # Create all necessary parent directories
    find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -exec dirname {} \; | while read -r dir; do
        mkdir -p "$HOME/.$(basename "$dir")"
    done

    # Symlink all .symlink files
    find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' | while read -r src; do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

main() {
    setup_gitconfig
    install_dotfiles

    info "Installing dependencies"
    if ! "$DOTFILES_ROOT/bin/dot" > /tmp/dotfiles-dot 2>&1; then
        fail "Error installing dependencies"
    fi
    success "Dependencies installed"

    echo ""
    success "All done! Your dotfiles are installed."
    info "You may need to restart your shell for all changes to take effect."
}

main "$@"
