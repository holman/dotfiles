#!/usr/bin/env bash
#
# bootstrap installs things

set -o errexit -o nounset -o pipefail

cd "$(dirname "$0")"
DOTFILES=$(pwd -P)
export DOTFILES

# get the basic definitions
source ${DOTFILES}/functions/core
info "Detected environment is ${ENVIRONMENT}"

# Function when script exits
function terminate() {
  fail "Installation has been terminated"
}
trap terminate INT

# Trap when ERR was detected in a script
function err_handler() {
  fail "Caught unhandled error on line $(caller): \"$1\" returned $2 ==" 1
}
trap 'err_handler "${BASH_COMMAND}" "${?}"' ERR


setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your git author name?'
    read -e git_authorname
    user ' - What is your git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_zsh () {
  if [[ "${ENVIRONMENT}" != ACS ]]; then
    info "Installing ZSH"

    sudo apt-get install -y zsh

    if [[ $SHELL != '/usr/bin/zsh' ]] ; then
      # change zsh as default for me
      chsh -s $(which zsh)
      # and root
      sudo chsh -s $(which zsh)
    fi
  fi

  # oh-my-zsh install - it MUST be installed before installing the dotfiles
  if [[ -d ~/.oh-my-zsh/ ]] ; then
    info "oh-my-zsh is already installed..."
    ( cd ~/.oh-my-zsh && git pull )
  else
    info "oh-my-zsh not found, now installing oh-my-zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  fi

  success "ZSH CLI installed OK"
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_topics() {
  # find the installers and run them iteratively
  find . -name install.sh | sort | while read installer ; do info "running topic installer ${installer}" ; sh -c "${installer}" ; done
  # find . -name install.sh | while read installer ; do info "running topic installer ${installer}" ; echo "${installer}" ; done
}

if [[ -e ${HOME}/bin ]]
then
    success "${HOME}/bin folder found. Skipping creation ..."
else
    mkdir ${HOME}/bin
    success "Created ${HOME}/bin folder"
fi

if [[ "${SUDO_ALLOWED}" == true ]]; then
  sudo apt-get update
fi

setup_gitconfig
# we need to install zsh itself before running the rest of the setup. plugins can be installed later
install_zsh
install_dotfiles
install_topics

success 'Everything is installed!'
