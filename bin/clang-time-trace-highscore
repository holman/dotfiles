#!/usr/bin/env python3

import json
import glob
import sys
import argparse
from collections import defaultdict


TRACE_EVENTS_KEY = 'traceEvents'

# Dictionary of trace type and dictionary mapping the trace name and duration
# stats['Source']['my_file'] == duration sum across all files
stats = defaultdict(lambda: defaultdict(lambda: {"count": 0, "sum": 0}))

def append(trace_events):
    for event in trace_events:
        event_name = event['name']
        if not 'detail' in event['args']:
            continue
        file_name = event['args']['detail']
        stats[event_name][file_name]["sum"] += event['dur']
        stats[event_name][file_name]["count"] += 1

def fill_stats(args):
    for json_file in glob.glob("%s/**/*.json" % args.json_dir, recursive=True):
        with open(json_file) as f:
            json_data = json.load(f)

            if not TRACE_EVENTS_KEY in json_data:
                print("Skipping %s, no %s found" % (json_file, TRACE_EVENTS_KEY))
                continue

            append(json_data[TRACE_EVENTS_KEY])

def print_stats():
    first = True
    for event, trace_sums in stats.items():
        if not first:
            print("\n\n")
        first=False
        print("---- Event: %s -- Top 10 Counts, Sums" % event)
        for name, stat_entry in sorted(trace_sums.items(), key=lambda kv: kv[1]["sum"],
                reverse=True)[0:10]:
            print("  %s\t%d\t%d" % (name, stat_entry["count"], stat_entry["sum"]))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Print out compile statistics based on clang time tracing json files")
    parser.add_argument("json_dir", help="Directory containing json trace files")
    args = parser.parse_args()
    fill_stats(args)
    print_stats()
