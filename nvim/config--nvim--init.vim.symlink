set nocompatible
set modelines=1

let g:loaded_python_provider = 0
" let g:loaded_python3_provider = 1

set lazyredraw

if exists('+termguicolors')
  set termguicolors
endif

let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2

" Always display the statusline in all windows
set laststatus=2
" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

filetype off

" Specify a directory for plugins
call plug#begin(stdpath('data') . '/plugged')

Plug 'preservim/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle', 'NERDTreeCWD'] }
" Source: https://github.com/junegunn/vim-plug/issues/424#issuecomment-189343357
augroup nerd_loader
  autocmd!
  autocmd VimEnter * silent! autocmd! FileExplorer
  autocmd BufEnter,BufNew *
        \  if isdirectory(expand('<amatch>'))
        \|   call plug#load('nerdtree')
        \|   execute 'autocmd! nerd_loader'
        \| endif
augroup END

autocmd! User nerdtree call AddNerdTreeMapping()

function! AddNerdTreeMapping()
  call NERDTreeAddKeyMap({
          \ 'key': 'yy',
          \ 'callback': 'NERDTreeYankCurrentNode',
          \ 'quickhelpText': 'put full path of current node into the default register' })
endfunction

function! NERDTreeYankCurrentNode()
    let n = g:NERDTreeFileNode.GetSelected()
    if n != {}
        call setreg('"', n.path.str())
    endif
endfunction

Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'

Plug 'kaihowl/vim-indent-sentence'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'

Plug 'nathanaelkane/vim-indent-guides'
Plug 'bronson/vim-trailing-whitespace'
" Plug 'kaihowl/vim-latex'

Plug 'godlygeek/tabular'
Plug 'justinmk/vim-sneak'
Plug 'airblade/vim-gitgutter'
Plug 'majutsushi/tagbar'
" Plug 'reedes/vim-colors-pencil'
Plug 'altercation/vim-colors-solarized'

Plug 'MarcWeber/vim-addon-local-vimrc'

Plug 'sainnhe/edge'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim'

Plug 'jaxbot/semantic-highlight.vim'

Plug 'tommcdo/vim-fubitive'

call plug#end()

syntax enable

set background=dark

" configure vim-fubitive GBrowse handler for bitbucket
let g:fubitive_domain_pattern = 'bitbucket\.tomtomgroup\.com'

" configure tmuxline
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
    \'a'       : '#S',
    \'y'       : ['%Y-%m-%d', '%H:%M'],
    \'z'       : '#h',
    \'win'     : ['#I', '#W'],
    \'cwin'    : ['#I', '#{?window_zoomed_flag,(,} #W #{?window_zoomed_flag,),}'],
    \'x'       : '%a',
    \'options' : {'status-justify' : 'left'}}


" The configuration options should be placed before `colorscheme edge`.
let g:edge_enable_italic = 1
let g:edge_disable_italic_comment = 0
let g:edge_diagnostic_line_highlight = 1
set cursorline
colorscheme edge

set tabstop=2 softtabstop=2 shiftwidth=2 expandtab shiftround

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

set wildignore+=*/node_modules/*,*.aux,*.d,*.o,*.pyc
set wildignorecase

" Enable indent guides per default
let g:indent_guides_enable_on_vim_startup = 1

" Shamelessly copied from Steve Losh's vimrc
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" First off, some standard settings, making vim more 'sane'
set encoding=utf-8
set scrolloff=3
set autoindent
set wildmenu
set ttyfast
" Set both number and relativenumber for hybrid number
" If version is before 7.4, the last setting, i.e. relativenumber persists
set number
set relativenumber
set undofile
set noautochdir

let mapleader = ","

" fix vim's default regex handling / search behavior
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" handle lines intelligently
set wrap
" set textwidth=79
set formatoptions+=qrn1
set colorcolumn=81

" set default chars for whitespace in list chars
set list
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

" Silent command
command! -nargs=1 Silent
      \ | execute ':silent '.<q-args>
      \ | execute ':redraw!'

" Restore position command
command! -nargs=1 RestoreCurPos
      \ | let save_cursor = getpos('.')
      \ | execute <q-args>
      \ | call setpos('.', save_cursor)

" Fugitive mappings
nnoremap <leader>gs :G<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gl :RestoreCurPos Silent 0Glog -n 20<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>ge :RestoreCurPos Gedit<cr>
nnoremap <leader>gE :RestoreCurPos Gtabedit<cr>
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gru :Git rebase @{u}<cr>
nnoremap <leader>gri :Git rebase -i @{u}<cr>
nnoremap <leader>g- :Silent Git stash -u<cr>:windo e<cr>
nnoremap <leader>g+ :Silent Git stash pop<cr>:windo e<cr>
" Git snapshot (stash everything, and apply again immediately)
nnoremap <leader>g0 :Silent ! git-stash-push ""<left>

" Git diff mapping 'push and next'
nnoremap <leader>n dp]c

" Git diff compare merge to base
nnoremap <leader>g2 :Gedit :2<cr>:Gdiff :1<cr>
nnoremap <leader>g3 :Gedit :3<cr>:Gdiff :1<cr>

" Fugitive git push / fetch mappings
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gP :Git pub<cr>
nnoremap <leader>gf :Git fetch<cr>

au FileType qf set nolist

" Git mapping for finding conflict markers
nnoremap <leader>c /\m\(<<<<<<< \\|=======\n\\|>>>>>>> \)<cr>

" customize ctrlp plugin
let g:ctrlp_extensions = ['line', 'mixed']
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_switch_buffer = 't' " Do not switch to other tabs on <cr>
let g:ctrlp_by_filename = 1
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_root_markers = ['.root']



" Set delay to prevent extra search
let g:ctrlp_lazy_update = 350

" Do not clear filenames cache, to improve CtrlP startup
" You can manualy clear it by <F5>
let g:ctrlp_clear_cache_on_exit = 0

" Set no file limit, we are building a big project
let g:ctrlp_max_files = 0

" If rg is available use it as filename list generator instead of 'find'
if executable('rg')
    let g:ctrlp_user_command = 'rg %s --hidden --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
endif

nnoremap <c-l> :CtrlPLine<cr>

" Normal mode commands
" easier escaping
inoremap jj <ESC>
" join two lines
inoremap JJ <esc>Ji

" python pep8 compliance
au BufEnter *.py set sw=4 ts=4 sta et fo=croql

" Make
" We explicitly use a separate makefile to drive make to be able to switch make
" commands by editing the makefile without having to reload vimrc
let &makeprg = 'make -f .VimMakefile --no-builtin-variables'
if filereadable('/proc/cpuinfo')
  let &makeprg = &makeprg.' -j '.(system('grep -c ^processor /proc/cpuinfo')+1)
endif
nnoremap <leader>mm :Make<cr>
nnoremap <leader>mM :Make!<cr>
nnoremap <leader>mc :Make clean<cr>
nnoremap <leader>M :edit .VimMakefile<cr>
" For latex file run latex instead of makefile
au FileType tex nnoremap <buffer> <leader>mm :silent! call Tex_RunLaTeX()<CR>

" Sudo after the fact
cmap w!! w !sudo tee % >/dev/null

set pastetoggle=<leader>p

" Make sure latex-suite is invoked for plaintex files
let g:tex_flavor='latex'

" Configure pdf format for latex-suite
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
let g:Tex_ViewRule_pdf = 'Skim'

" Set more sensible ignore warning level for latex-suite
" ensures that missing numbers, undefined references, and citations are shown
let g:Tex_IgnoreLevel = 4

" Change default alt mappings for latex-suite to mac friendly ones
imap <leader>lb <Plug>Tex_MathBF
imap <leader>lc <Plug>Tex_MathCal
imap <leader>ll <Plug>Tex_LeftRight
imap <leader>li <Plug>Tex_InsertItemOnThisLine

" Blindly robbed from Janus vim.rc
" https://github.com/rdeits/janus/blob/master/vimrc
" Calculate the number of screen lines needed to display a file with folds at
" the given fold_level. This is used to set the initial fold level of a file
" in order to display the entire file on screen if possible without closing
" any unnecessary folds.
function! ScreenLines(fold_level)
  let line_num = 1
  let screen_lines = 0
  let prev_fold_level = 0
  let cur_fold_level = 0
  let buf_length = line("$")
  while line_num <= buf_length
    let fold_expr = foldlevel(line_num)
    let prev_fold_level = cur_fold_level
    let cur_fold_level = fold_expr
    if (cur_fold_level <= a:fold_level) || ((cur_fold_level != prev_fold_level) && (prev_fold_level <= a:fold_level))
      let screen_lines = screen_lines + 1
    endif
      let line_num = line_num+1
   endwhile
   return screen_lines
endfunction

" Increase the fold level until the entire file will fit on the screen or
" foldlevel reaches 10, whichever comes first.
function! FoldToScreen()
  let ndx = 0
  set foldlevel=0
  while ndx < 10
    let ndx = ndx + 1
    if ScreenLines(ndx) > &lines
      break
    endif
    set foldlevel+=1
  endwhile
endfunction

augroup tex_fold_function
  autocmd!
  autocmd BufWinEnter *.tex call FoldToScreen()
augroup END

" Function to break lines in tex files on period(.) and wrap to colorcolumn
" This makes version control for latex files easier since git is line-based
command! -range LineBreakTexSource :silent! <line1>,<line2>s/\. /.\r/g | :<line1>,<line2>normal gw | :noh<cr>

" Comment out, if you need to debug latex-suite
"let g:Tex_Debug=1
"let g:Tex_DebugLog="texdebug.log"

" Allow to delete old characters in insert mode
" Also needed that latex-suite will be able to delete placeholders
set backspace=2

" enable spellchecking for git commits
au FileType gitcommit setlocal spell
au FileType gitcommit setlocal textwidth=71 colorcolumn=+1
" and for markdown files
au FileType markdown setlocal spell
" and for tex files
au FileType tex setlocal spell
au FileType tex syntax spell toplevel

" Indent-sentence mapping
" For paragraph, restore position using register T
nnoremap <leader>ip i//CURSOR//<esc>vip :call g:IndentSentence()<cr>:%s/\/\/CURSOR\/\///<cr>
vnoremap <leader>is :call g:IndentSentence()<cr>

" gitgutter configuration
" explicitly set hunk navigation commands
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)

" open tagbar (and focus) (or jump to if open)
nnoremap <leader>o :TagbarOpen fj<cr>
" show line numbers in tagbar
let g:tagbar_show_linenumbers=-1

" Set smart case for rg
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --hidden
endif

augroup myvimrc
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l*    lwindow
augroup END

fun! s:Grep(txt)
  if empty(a:txt)
    let needle = expand("<cword>")
  else
    let needle =  a:txt
  endif
  silent! execute "grep! " . needle
endfun

command! -nargs=* -complete=file Rg :call s:Grep(<q-args>)

noremap <leader>rr :Rg<cr>
noremap <leader>r<space> :Rg<space>

" Add yaml file type for salt sls files
au BufEnter *.sls set ft=yaml

augroup groovy_filetype
  autocmd!
  autocmd FileType groovy set sw=4 ts=4 sta et fo=croql
augroup END

" https://github.com/tommcdo/vimfiles/blob/master/config/diffopt.vim
" Provide a function to toggle iwhite (ignore whitespace)
function! s:toggle_iwhite(opt)
	if a:opt == -1 || (a:opt == 0 && &diffopt =~ 'iwhite')
		echo ':set diffopt-=iwhite'
		set diffopt-=iwhite
	elseif a:opt == 1 || (a:opt == 0 && &diffopt !~ 'iwhite')
		echo ':set diffopt+=iwhite'
		set diffopt+=iwhite
	endif
endfunction

" Add mappings for toggling and setting iwhite (in the style of unimpaired.vim)
nnoremap coD :call <SID>toggle_iwhite(0)<CR>
nnoremap [oD :call <SID>toggle_iwhite(1)<CR>
nnoremap ]oD :call <SID>toggle_iwhite(-1)<CR>

" Netrw settings to show linenumbers abs/rel by default
let g:netrw_bufsettings = 'noma nomod nu rnu nobl nowrap ro'

"" Toggle between .h and .cpp with F4.
function! ToggleBetweenHeaderAndSourceFile()
  let bufname = bufname("%")
  let bufname_base = fnamemodify(bufname, ":r") . "."
  let ext = fnamemodify(bufname, ":e")
  if ext == "h" || ext == "hpp"
    let ext = "cpp"
  elseif ext == "cpp"
    if filereadable(bufname_base . "hpp")
      let ext = "hpp"
    else
      let ext = "h"
    endif
  else
    return
  endif
  let bufname_new = bufname_base . ext

  let bufname_alt = bufname("#")
  if bufname_new == bufname_alt
    execute ":e#"
  else
    execute ":e " . bufname_new
  endif
endfunction

map <silent> <Leader>q :call ToggleBetweenHeaderAndSourceFile()<CR>

" Explicitly set preferred order of handlers for dispatch to exclude the JOB
" handler
let g:dispatch_handlers = [
      \ 'tmux',
      \ 'screen',
      \ 'windows',
      \ 'iterm',
      \ 'x11',
      \ 'headless',
      \ ]

function! s:get_default_branch() abort
  " Source: https://stackoverflow.com/questions/28666357/git-how-to-get-default-branch
  " let defaultbranch = execute("Git symbolic-ref refs/remotes/origin/HEAD")
  let defaultbranch = split(execute("Git rev-parse --abbrev-ref origin/HEAD"), "\n")[0]
  if defaultbranch =~ 'fatal: .*'
    echohl WarningMsg
    echom "Using default origin/master, no symbolic-ref for refs/remotes/origin/HEAD found."
    echohl None
  endif
  let defaultbranch = 'origin/master'
  return defaultbranch
endfunction

function! s:get_diff_file_master_merge() abort
  let defaultbranch = s:get_default_branch()
  let common_revision = split(execute('Git merge-base ' . defaultbranch . ' HEAD'), "\n")[0]
  return common_revision
endfunction

command! -nargs=1 DiffRev call s:get_diff_files(<q-args>)

"" Source: https://stackoverflow.com/a/22676189/522251
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif
"" End

" Source https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

setglobal commentstring=//\ %s
autocmd FileType cpp setlocal commentstring=//\ %s

nnoremap <leader>gD :call <SID>view_merge_request()<cr>
command! DiffHistory call s:view_merge_request()

" Source / Inspiration
" https://github.com/tpope/vim-fugitive/issues/132#issuecomment-649516204
function! s:view_merge_request() abort
  let revision = <sid>get_diff_file_master_merge()
  execute 'Git difftool ' . revision . '..HEAD --find-renames=50\%'
  call s:diff_current_quickfix_entry()
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endfunction

function s:diff_current_quickfix_entry()
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    for i in reverse(range(len(diff)))
      exe (i ? 'rightbelow' : 'leftabove') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endfunction

function! s:add_mappings()
  nnoremap <buffer>]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap <buffer>[q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endfunction

" ------ Status line (source: https://shapeshed.com/vim-statuslines) ------
set statusline=
set statusline+=%#Search#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 
" -----

" Make nerdtree work like vim-vinegar
let g:NERDTreeMapJumpParent = '-'
" Root dir
nmap - :NERDTreeCWD<cr>
" Current file when buffer open
autocmd BufRead * nmap - :NERDTreeFind<CR>

" ------ TODOS mappings
function! s:GetUser()
  return trim(system('id -un'))
endfunction

function! s:SearchForToDo()
  let user = <sid>GetUser()
  execute ':Rg todo.'.user
endfunction

function! s:GenerateToDo()
  let user = <sid>GetUser()
  return "TODO(" . user . ")"
endfunction

inoremap <expr> <leader>t <sid>GenerateToDo()
nnoremap <leader>t :call <sid>SearchForToDo()<cr>

" Configure vim-addon-local-vimrc
let g:local_vimrc = {'names':['.vimrc', '.nvimrc'],'hash_fun':'LVRHashOfFile'}

set completeopt=menuone,noinsert
" Don't mess with LSP ordering
let g:completion_sorting = 'none'
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
let g:completion_matching_ignore_case = 1
let g:completion_matching_smart_case = 1
set shortmess+=c

lua <<EOF
local configs = require('lspconfig')
-- This is grabbing into internals of lspconfig. If this breaks, this is on me.
local util = require 'lspconfig/util'
local root_pattern = util.root_pattern('compile_commands.json')

-- Get compile_commands.json based on current working directory in case there are multiple available, e.g., conan workspaces with the workspace vs the single package build
-- Supply an invalid dir to clangd in case that no compile_commands.json can be found in the current working dir. This restores the original behavior.
configs.clangd.setup{root_dir=function(fname)
    return root_pattern(vim.loop.cwd()) or util.path.dirname(fname)
  end,
  cmd={'clangd', '--background-index', '--compile-commands-dir='..(root_pattern(vim.loop.cwd()) or '')},
  on_attach=require'completion'.on_attach}

configs.pylsp.setup{on_attach=require'completion'.on_attach}

configs.rls.setup{on_attach=require'completion'.on_attach}
EOF

autocmd Filetype cpp,python,rust setlocal omnifunc=v:lua.vim.lsp.omnifunc
autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

" Auto-format files when possible prior to saving
autocmd BufWritePre * lua vim.lsp.buf.formatting_sync(nil, 1000)

" Original source with modifications
" https://www.reddit.com/r/neovim/comments/j2ny8b/is_there_a_way_to_open_a_new_tab_when_using_lua/g76ogzr?context=3
"
" Normal jump to location when current buffer is not modified, otherwise open
" new tab.
lua <<EOF
local api = vim.api
local util = vim.lsp.util
local callbacks = vim.lsp.handlers
local log = vim.lsp.log

local location_callback = function(_, method, result)
  if result == nil or vim.tbl_isempty(result) then
    local _ = log.info() and log.info(method, 'No location found')
    return nil
  end

  if vim.bo.modified then
    api.nvim_command('tabnew')
  end

  if vim.tbl_islist(result) then
    util.jump_to_location(result[1])
    if #result > 1 then
      util.set_qflist(util.locations_to_items(result))
      api.nvim_command("copen")
    end
  else
    util.jump_to_location(result)
  end
end

callbacks['textDocument/declaration']    = location_callback
callbacks['textDocument/definition']     = location_callback
callbacks['textDocument/typeDefinition'] = location_callback
callbacks['textDocument/implementation'] = location_callback
EOF

nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>

" Configure semantic highlight
:nnoremap <Leader>s :SemanticHighlightToggle<cr>

" vi: ft=vim :
