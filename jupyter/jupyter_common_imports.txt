IMPORTS

import pandas as pd
pd.options.display.max_columns = None  # show all columns in head
import numpy as np
np.random.seed(1)
import matplotlib.pyplot as plt
%matplotlib inline
plt.rcParams['figure.facecolor'] = 'white'

import logging
logger = logging.getLogger()
logFormatter = logging.Formatter("%(asctime)s [%(name)40.40s] [%(funcName)10.10s] [%(levelname)-5.5s]  %(message)s")
logger.setLevel(logging.INFO)
logging.debug("test")

%load_ext autoreload
%autoreload 2

from dnautil import util as dnautil
from dnautil import plot


# LOGGING

import sys
import logging
logger = logging.getLogger()
logFormatter = logging.Formatter("%(asctime)s [%(name)40.40s] [%(funcName)10.10s] [%(levelname)-5.5s]  %(message)s")
logger.setLevel(logging.INFO)
                      
# to see console output? But doubles up logging in notebooks                                                           
consoleHandler = logging.StreamHandler(sys.stdout)
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)

SCATTER PLOT WITH COLOURS

import seaborn
fg = seaborn.FacetGrid(data=df, size=7, hue="run_consistency")
fg.map(plt.scatter, 'prob_hu', 'prob_st').add_legend()

PRINT LONG STRINGS
with pd.option_context('display.max_colwidth', 1000):

TURN OFF SCIENTIFIC NOTATION ON AXES
ax.ticklabel_format(style='plain')

LEGEND OUTSIDE AXIS
ax.legend(bbox_to_anchor=[1., 1.]).set_title('average latency')

PRINT WHOLE DF
with pd.option_context('display.max_rows', None, 'display.max_columns', None):
    display(df)

ROTATE/CHANGE XLABELS
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

HIST WITH LINE: histtype=u'step'

MONTH BEGIN: df['purchase_date'].dt.floor('d') + 
                           pd.offsets.MonthEnd(0) - pd.offsets.MonthBegin(1)

NORMALIZE HIST: 
weights = np.ones_like(myarray) / len(myarray)
plt.hist(myarray, weights=weights)


AGGREGATE SYNTAX
df.groupby('contract_id').agg(
    first_charge=('charge_time', 'first'),
)

IGNORE WARNING
import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")

SHARE Y AXIS
fig, axs = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(18,4))
...
for ax in axs.ravel():
    ax.yaxis.set_tick_params(labelbottom=True)
